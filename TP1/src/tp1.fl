%{
/* Declaracoes C diversas */
#include <comentarios.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h> 
int fileno(FILE *stream);

long profundidade = 0;
Nivel com = NULL;

void printTimestamp(); 
void endComment();
void printNTimes(int times, char print); 
void printFieldStringPreDef(char* string);  
void printFieldString(char* field, char* yytext, int ultimo);
void printFieldNum(char* field, long num, int ultimo); 
%}
%option stack noinput nounput noyy_top_state
/* Abreviaturas de ER */

/* Gerais */
space		[\ \t\r\n]
decimal 	[0-9]
alpha 		[a-zA-Z]

comList			\<ol\ +class\ *=\ *\"comments__list\"
endOL			\<\/ol\>

com				\<li\ +class\ *=\ *\"comment\"
endLI			\<\/li\>
comListEnd 		{space}*{endOL}
otherLI			{space}*\<li

id				data\-comment\-id=\"
idValue			({alpha}|{decimal}|\-)+

time			\<time
datetime 		datetime\ *=\ *\"
datetimeValue	({decimal}|[\-\:\.T])+

nome			\<h5\ *class=\"comment__author\"\ *\>{space}*\<a[^\>]+\>
endAnchor		\<\/a\>

commentText 	\<div\ *class=\"comment__content\"\>{space}*\<p\>
endParagraph	\<\/p\>	

%x COMLIST COM ID TIME DATETIME NAME COMMENTEXT

%%
{comList}			{yy_push_state(COMLIST);}

<COMLIST>{
{com}				{
						if(profundidade > 0){ addComment(com); com = addNivelToComment(com);}
						printFieldStringPreDef("{\n");
						printTimestamp();
						printFieldStringPreDef("\"likes\": 0,\n");
						yy_push_state(COM);
					}
{endOL}				{
						if(profundidade > 0) printFieldStringPreDef("],\n");
						--profundidade;
						yy_pop_state(); 
					}
}

<COM>{ 
{comList}					{
								printFieldStringPreDef("\"hasReplies\": true,\n");
								printFieldStringPreDef("\"replies\": [\n");
								++profundidade;
								if(profundidade == 1) com = createNivel(com);
								yy_push_state(COMLIST); 
							}
{id}						{yy_push_state(ID);}
{time}						{yy_push_state(TIME);}
{endLI}/{comListEnd}		{
								endComment();
								printFieldStringPreDef("}\n");
							}
{endLI}/{otherLI}			{
								endComment();
								printFieldStringPreDef("},\n");
							}
{nome}						{yy_push_state(NAME);}
{commentText}				{
								printFieldStringPreDef("\"commentText\": \"");
								yy_push_state(COMMENTEXT);
							}
}

<ID>{
{idValue}			{printFieldString("id", yytext, 0);}
\"					{yy_pop_state();}
}

<TIME>{
{datetime}			{yy_push_state(DATETIME);}
\>					{yy_pop_state();}
}

<DATETIME>{
{datetimeValue}		{printFieldString("date", yytext, 0);}
\"					{yy_pop_state();}
}

<NAME>{
.+/\<\/a\>			{printFieldString("user", yytext, 0);}
{endAnchor}			{yy_pop_state();}
}

<COMMENTEXT>{
{endParagraph}		{fprintf(yyout, "\",\n"); yy_pop_state();}
\"					{fprintf(yyout, "\\\"");}
\n|\r  				{fprintf(yyout, " ");}
.					{fprintf(yyout, "%s", yytext);}
}

<*>.|\n|\r				{}
%%

int yywrap()
{ return(1); }

void help(){

	printf("\n");
	printf("****************************Publico2NetLang**************************\n");
	printf("**                                                                 **\n");
	printf("**    Bem-vindo ao Publico2NetLang, esperamos que lhe seja útil !  **\n");
	printf("**                                                                 **\n");
	printf("**                                                                 **\n");
	printf("**********************************HELP*******************************\n");
	printf("**                                                                 **\n");
	printf("**    Utilização:                                                  **\n");
	printf("**                 1- make                                         **\n");
	printf("**                 2- ./program [nome do ficheiro a processar]     **\n");
	printf("**                                                                 **\n");
	printf("**    Notas:                                                       **\n");
	printf("**    O ficheiro resultante vai para a mesma pasta com o mesmo     **\n");
	printf("**       nome do original, apenas com a modificação de ter         **\n");
	printf("**       \"JSON.json\" no final.                                     **\n");
	printf("**                                                                 **\n");
	printf("**********************************HELP*******************************\n");

}

void endComment(){
	long nReplies = numberOfReplies(com);

	if(nReplies > 0) {
		printFieldNum("numberOfReplies", nReplies, 1);
	}
	else{
		// para não imprimir como string
		printFieldStringPreDef("\"hasReplies\": false,\n");
		printFieldNum("numberOfReplies", numberOfReplies(com), 0);
		printFieldStringPreDef("\"replies\": []\n");
	}

	if(profundidade > 0) com = getAnt(com);
	else {freeAll(com); com = NULL;}

	yy_pop_state();
}

void printNTimes(int times, char print){
	for(int i = -1; i < times; i++)
		fprintf(yyout, "%c", print);
}

void printFieldStringPreDef(char* string){
	printNTimes(profundidade, '\t');
	fprintf(yyout, "%s", string);
}

void printFieldString(char* field, char* yytext, int ultimo){
	printNTimes(profundidade, '\t');
	if(ultimo == 1)	fprintf(yyout, "\"%s\": \"%s\"\n", field, yytext);
	else fprintf(yyout, "\"%s\": \"%s\",\n", field, yytext);
}

void printFieldNum(char* field, long num, int ultimo){
	printNTimes(profundidade, '\t');
	if (ultimo == 1) fprintf(yyout, "\"%s\": %ld\n", field, num);
	else fprintf(yyout, "\"%s\": %ld,\n", field, num);
}

void printTimestamp(){
	time_t t = time(NULL);
	printFieldNum("timestamp", t, 0);	
}

int main(int argc, char* argv[]){ 
	
	if(argc < 2){
		help();
		return 0;
	}
	
	if(access(argv[1], F_OK) != -1){

		if(access(argv[1], R_OK) != -1){

			// abrir o ficheiro temporário para escrever
			yyout = fopen("TEMP.json", "w");

			// escrever nome da collection
			fprintf(yyout, "{\"commentThread\": [\n");
			
			// abrir o ficheiro a ler
			yyin = fopen(argv[1], "r");

			clock_t start = clock();
			// inicializar a leitura
			yylex();
	
			// fechar a collection
			fprintf(yyout, "]}\n");

			fclose(yyin);
			fclose(yyout);

			int len = strlen(argv[1]);

			// definir nome do ficheiro final
			char CP1252toUTF8[45+len];
			char nome[len+10];
			strcpy(nome, argv[1]);
			nome[len-5] = '\0';
			strcat(nome, "JSON.json");
			
			// Como o ficheiro de input (yyin) tem o encoding CP1252 tem se passar para UTF8
			sprintf(CP1252toUTF8, "iconv -f cp1252 -t utf8 TEMP.json > \"%s\"", nome); 
			system(CP1252toUTF8);
			system("rm TEMP.json");
			clock_t end = clock(); 
			float seconds = (float)(end - start) / CLOCKS_PER_SEC; 
			printf("Programa demorou: %fs\n", seconds);
		}
		else{
			printf("Não possui permissão de leitura sobre o ficheiro fornecido!\n");
		}
	}
	else{
		printf("O ficheiro dado como argumento não existe !\n");
	}

	return 0;
}
