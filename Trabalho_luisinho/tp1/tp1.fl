%option noyywrap
%{

#include "src/HashTable.h"
#include <time.h>

int limite;
long i = 0, j = 0;
long n;
long idSQL;
char* lingua;
void procLING(char*, int);
HashTable h;
LAN val;
char* linguas[7] = {"PT","DE","EN","ES","FR","IT","RU"};
int ntermos[6] = {0, 0, 0, 0, 0, 0};
int nfails[5] = {0, 0, 0, 0, 0};
int nignores[4] = {0, 0, 0, 0};
%}

D [0-9]+
string [a-zA-Z0-9]*
E [!]
W Wikipédia:
Cat Categoria:
Port Portal:
Prede Predefinição:
Ajuda Ajuda:
FAIL1 (.*\n*)[(]{D}+[-]{D}+[)]
FAIL2 .*[(]{D}+[)]
FAIL3 ((.*{E})+|({E}.*)+)
FAIL4 {W}.*
FAIL5 .*a[.]C[.].*
IGNORE1 ({Cat}.*)
IGNORE2 ({Port}.*)
IGNORE3 ({Prede}.*)
IGNORE4 ({Ajuda}.*)
INT [<]title[>]
ENDT [<]"/"title[>]


%x TPT IDPT TXT SQL IDSQL LINGUA TERMO SKSQL SQLL

%%

 //Aqui é leitura do ficheiro txt (termos pt)

<TXT>{INT}                  { BEGIN TPT; }

<TPT>{

 {FAIL1}/{ENDT}           { i++; nfails[0]++; BEGIN TXT;}

 {FAIL2}/{ENDT}         { i++; nfails[1]++; BEGIN TXT;}

 {FAIL3}/{ENDT}         { i++; nfails[2]++; BEGIN TXT;} 

 {FAIL4}/{ENDT}         { i++; nfails[3]++; BEGIN TXT;} 

 {FAIL5}/{ENDT}         { i++; nfails[4]++; BEGIN TXT;}

 {IGNORE1}/{ENDT}         {  nignores[0]++; BEGIN IDPT; val = insertList(NULL, yytext + 10, "PT");} 

 {IGNORE2}/{ENDT}         {  nignores[1]++; BEGIN IDPT; val = insertList(NULL, yytext +7, "PT");} 
 
 {IGNORE3}/{ENDT}         {  nignores[2]++; BEGIN IDPT; val = insertList(NULL, yytext + 15, "PT");} 

 {IGNORE4}/{ENDT}         {  nignores[3]++; BEGIN IDPT; val = insertList(NULL, yytext+6, "PT");} 

 .+/{ENDT}              { BEGIN IDPT; val = insertList(NULL, yytext, "PT");}
}

<IDPT>[<]id[>]{D}+/[<]"/"id[>]  {   BEGIN TXT;
                                      j++;
                                      long id = atol(yytext+4);
                                      insertHashTable(&h, id, val);
                                      if(limite && j == n) {printf("Passadas: %ld Lidas: %ld \n ", i, j); return 0;}
                                    }

<TXT><EOF>            { printf("Passadas: %ld Lidas: %ld \n", i, j); }


  

<SQL>INSERT.*\ VALUES\ /[(]      {BEGIN IDSQL;} 

<SKSQL>[)]\,[(]          {BEGIN IDSQL;}

<IDSQL>{D}/[,]               { idSQL = atol(yytext);
                                BEGIN LINGUA;}
  

<LINGUA>{

 [,][']de/['][,]   {procLING("DE", 0);}
 [,][']en/['][,]   {procLING("EN", 1);}
 [,][']es/['][,]   {procLING("ES", 2);}
 [,][']it/['][,]   {procLING("IT", 3);}
 [,][']fr/['][,]   {procLING("FR", 4);}
 [,][']ru/['][,]   {procLING("RU", 5);}
 [,]['][s].['][,]   {return 0;}
 .                 {BEGIN SKSQL;}

}

<TERMO>[^'\\]+/['][)]            { val = getLAN(h, idSQL);
                                   val = insertList(val, yytext, lingua);
                                   insertHashTable(&h, idSQL, val);
                                       BEGIN SKSQL;}


<*>.|\n                   { }


%%


void procLING(char* s, int l){
        if(!containsKey(h, idSQL)) BEGIN SKSQL;
        else {ntermos[l]++; lingua = s ; BEGIN TERMO;}
}

 void htmlInit(FILE *f){
    fprintf(f,"<html><head><meta charset='UTF-8'/> </head><body><ul>");
}

void htmlFinit(FILE *f){
    fprintf(f,"</ul></body></html>");
}


void create_csvTABLE(char* fich){

  FILE* csv = fopen(fich, "w+");
  fprintf(csv, "idTermo , PT , DE , EN , ES , FR , IT , RU\n");
  long sizeh = getSize(h);
  for(long idh = 0; idh < sizeh; idh++){
      if(containsKey(h, idh)){
          fprintf(csv,"%ld, ", idh);
          LAN aux = getLAN(h, idh);
          fprintf(csv, "%s", getValue(aux));
          aux = avancaL(aux);
          int it;
          for(it = 1; it<7 && aux!=NULL; it++){
              int cmp = strcmp(linguas[it], getLang(aux));
              if(!cmp) {fprintf(csv, ",%s", getValue(aux)); aux = avancaL(aux);}
              else {fprintf(csv,",");}
          } 
          
          for(int its = 7-it; its >= 0; its--){
                  fprintf(csv, ",");
          }
          
          fprintf(csv,"\n");
      }
  }
  fclose(csv);
}

int maisTraduzida(int a[], int n){
    int res = 0;
    for(int i = 1; i < n; i++){
      if(a[i] > a[res]) res = i;
    }
    return res;
}

long somaTermos(int a[], int n){
	int res = 0;
	for(int i = 0; i<n; i++){
		res += a[i];
	}
	return res;
}

void procura_termoLingua(long id, char* s, char* res[]){
        LAN x = getLAN(h, id);
        res[0] = getValue(x);
        for(x = avancaL(x); x!=NULL && strcmp(getLang(x), s); x = avancaL(x)){
        }
        if(x!=NULL) {res[1] = getValue(x); return;}
        printf("NULL \n");
        res[1] = " Não existe tradução desse termo nesta língua! \n";
}


void help(){
  printf("\n");
  printf(".-----------------------------------HELP-----------------------------------------.\n");
  printf(".                                Utilização:                                     .\n");
  printf(".                                  make                                          .\n");
  printf(".  ./tp1 [Nº de tuplos a serem processados-opcional] [nome].txt [nome].sql       .\n");
  printf(".                                                                                .\n");
  printf(".--------------------------------------------------------------------------------.\n");
  printf(".                          OUTRAS FUNCIONALIDADES:                               .\n");
  printf(".       0     ->      Terminar o programa                                        .\n");
  printf(".       1     ->      Dado um id de um termo, dar a tradução numa dada linguagem .\n");
  printf(".       2     ->      Dado um id de um termo, apresentar todas as traduções      .\n");
  printf(".       3     ->      Vizualizar tabela de tradução produzida                    .\n");
  printf(".       4     ->      Perguntar qual a linguagem com mais tradução               .\n");
  printf(".                                                                                .\n");
  printf(".-----------------------------------HELP-----------------------------------------.\n");
}

int main(int argc, char* argv[]){

  clock_t start, end;
  double time_spent;

  if(argc <= 2){
    help();
    return 0;

  }

  if(argc > 2 && argc <= 4){
    int f1 = 1;
    if(argc >= 4) {n = atol(argv[1]); limite = 1; f1++; HashTableN(&h, n);}
    else {limite = 0; HashTableS(&h);}

    printf("A ler o ficheiro TXT...\n");
      start = clock();

      BEGIN TXT;
      yyin = fopen(argv[f1], "r");
      yylex();
      fclose(yyin);

      end = clock();
      time_spent = (double)(end - start) / CLOCKS_PER_SEC;
      printf("Leitura txt executada em %.3f segundos \n", time_spent);

    printf("A ler ficheiro SQL...\n");

    start = clock();
    BEGIN SQL;
      yyin = fopen(argv[f1+1], "r");
      yylex();
      fclose(yyin);
      end = clock();
      time_spent = (double)(end - start) / CLOCKS_PER_SEC;
      printf("Leitura sql executada em %.3f segundos \n", time_spent);

  }
  else {help(); return 0;}

  // CSV
  printf("A criar tabela CSV...\n");
  start = clock();
  create_csvTABLE("tabela.csv");
  end = clock();
  time_spent = (double)(end - start) / CLOCKS_PER_SEC;
  printf("Tabela criada em %.2f segundos \n", time_spent);

  //HTML

  char filename[200];
  FILE* ind = fopen ("index.html","w");
  FILE*out;
   htmlInit(ind);
        fprintf(ind,"<b>Dados Estatisticos sobre traduções em 6 Línguas </b></br></br>"); 
   float tmedia;

   // Lingua Portuguesa
   sprintf(filename,"%s.html",linguas[0]);
     out = fopen (filename,"w");
     htmlInit(out);
     fprintf(ind,"<li><a href='%s'>%s</a></li>\n",
                 filename, 
                 linguas[0]);
                
     tmedia = somaTermos(ntermos,6)/(float)j;
     fprintf(out,"<br/><b>Lingua: %s </b>", linguas[0]);
     
     //Imagem correspondente à bandeira do pais.
     fprintf(out,"<img src=\"%s.png\" alt=\"Trulli\" width=\"100\" height=\"70\" align=\"middle\">",linguas[0]);

     // Dados estatisticos
     fprintf(out,"<br/><br/><b>Estatistica:</b><br/><br/>Número de Termos selecionados para tradução: %ld<br/>Número de Termos analizados (termos totais): %ld<br/>Media de traduções por palavra: %.3f<br/>Número de entradas ignoradas: %ld<br/>Número de prefixos removidos: %ld<br/><br/><b>Entradas Removidas:</b><br/> Anos na forma (****): %d<br/> Anos na forma (****-****): %d<br/> Anos na forma **** a.C.: %d<br/> Wikipedia: %d<br/> ! : %d<br/><br/><b>Prefixos Removidos:</b><br/> Categoria: %d<br/> Portal: %d<br/> Predefinição: %d<br/> Ajuda: %d<br/><br/><br/>",j,somaTermos(nfails,5)+j, tmedia, somaTermos(nfails,5),somaTermos(nignores,4),nfails[1],nfails[0],nfails[4],nfails[3],nfails[2],nignores[0],nignores[1],nignores[2],nignores[3]);

     fprintf(out,"<br/><a href='%s'>%s</a>\n",
                 "index.html", 
                 "voltar");
     htmlFinit(out);
     fclose(out);

   // Outras Linguas 
   for(int i=0; i < 6; i++){

     sprintf(filename,"%s.html",linguas[i+1]);
     out = fopen (filename,"w");
     htmlInit(out);
     fprintf(ind,"<li><a href='%s'>%s</a></li>\n",
                 filename, 
                 linguas[i+1]);
     tmedia = ntermos[i]/(float)somaTermos(ntermos,6);
     fprintf(out,"<br/><b>Lingua: %s </b>", linguas[i+1]);
     
     //Imagem correspondente à bandeira do pais.
     fprintf(out,"<img src=\"%s.png\" alt=\"Trulli\" width=\"100\" height=\"70\" align=\"middle\">",linguas[i+1]);

     // Dados estatisticos
     fprintf(out,"<br/><br/><b>Estatistica:</b><br/><br/>Número de Traduções: %d<br/>Media de palavras traduzidas nesta lingua: %.3f (%.0f%%)<br/> ",ntermos[i], tmedia,(tmedia*100) );

     fprintf(out,"<br/><a href='%s'>%s</a>\n",
                 "index.html", 
                 "voltar");
     htmlFinit(out);
     fclose(out);

    }
    
     htmlFinit(ind); 
  fclose(ind);

  int opcao = 1;
  long idTermoq;
  char* resTra[2];
  char op[2];

          printf("\n       0     ->      Terminar o programa                                        \n");
          printf("       1     ->      Dado um id de um termo, dar a tradução numa dada linguagem \n");
          printf("       2     ->      Dado um id de um termo, apresentar todas as traduções      \n");
          printf("       3     ->      Vizualizar tabela de tradução produzida                    \n");
          printf("       4     ->      Perguntar qual a linguagem com mais tradução               \n");

  while(opcao){
          printf("\n Digite a opção pretendente: ");
          scanf("%d", &opcao);
        switch(opcao){
                case 0: 
                    printf("\n O programa será encerrado! \n"); 
                    break;
                case 1:
                    printf("Id do termo a ser traduzido:  ");
                    scanf("%ld", &idTermoq);
                    printf("\n Linguagem pretendida: ");
                    scanf( "%s", op);                           // erro aqui (já tentei com o scanf)
                    if(containsKey(h, idTermoq)){
                            procura_termoLingua(idTermoq, op, resTra);
                            printf("\n Termo (PT): %s \n Termo (%s): %s \n", resTra[0], op, resTra[1]);
                    }
                    else {printf("\n O termo não existe ou pertence a exceções! \n");}
                    break;
                case 2:
                    printf("Id do termo a ser traduzido:  ");
                    scanf("%ld", &idTermoq);
                    if(containsKey(h, idTermoq)){
                        LAN auxiliar = getLAN(h, idTermoq);
                        printf("Resultado: \n");
                        while(auxiliar != NULL){
                            printf("\n Termo (%s):  %s ", getLang(auxiliar), getValue(auxiliar));
                            auxiliar = avancaL(auxiliar);
                        }
                        printf("\n \n");
                    }
                    else {printf("\n Não existe termo com esse id ou pertence a uma exceção! \n");}
                    break;
                case 3: 
                    execlp("cat","cat","tabela.csv",NULL);
                    break;
                case 4:
                    printf("\n A lingua que mais termos PT traduziu é a ");
                    printf("%s \n \n", linguas[maisTraduzida(ntermos, 6)]);
                    break;
                default:
                    printf("\n Opção inválida!! \n");
                    printf("\n       0     ->      Terminar o programa                                        \n");
                    printf("       1     ->      Dado um id de um termo, dar a tradução numa dada linguagem \n");
                    printf("       2     ->      Dado um id de um termo, apresentar todas as traduções      \n");
                    printf("       3     ->      Vizualizar tabela de tradução produzida                    \n");
                    printf("       4     ->      Perguntar qual a linguagem com mais tradução               \n"); 
        }
  }

  return 1;
}